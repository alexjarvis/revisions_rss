<?php
// $Id: revisions_rss.module,v 1.2 2008/09/30 19:11:57 alexj Exp $

/**
 * @file
 * Revision RSS, written by Alex Jarvis
 */

define('REV_RSS_PERM', 'view revision rss');

/*
 * Adds a permission for viewing RSS revisions.
 */
function revisions_rss_perm() {
  return array(REV_RSS_PERM);
}

/**
 * Implementation of hook_menu().
 */
function revisions_rss_menu($may_cache) {
  $items = array();
  
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/content/revision-rss',
      'title' => t('Revision RSS publishing'),
      'description' => t('Configure RSS feeds for revisions.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'revision_rss_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM);
    $items[] = array(
      'path' => 'revisionrss',
      'title' => '',
      'callback' => 'revisions_rss_handler',
      'access' => user_access(REV_RSS_PERM),
      'type' => MENU_CALLBACK);
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      
      if (revision_rss_check_type($node) && user_access(REV_RSS_PERM)) {
        drupal_add_feed(url('revisionrss/node/'. $node->nid), t('Updates for @title', array('@title' => $node->title)));
      }
    }
  }
  
  return $items;
}

/**
 * Define the settings form.
 */
function revision_rss_admin_settings() {
  $form['revision_rss_nodetypes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Generate RSS for these node types'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('revision_rss_nodetypes', array('page')));
  $form['array_filter'] = array('#type' => 'hidden');
  
  return system_settings_form($form);
}

/**
 * Menu callback; publish an RSS feed
 */
function revisions_rss_handler() {
  if (call_user_func('revisions_rss_node_feed')) {
    return;
  }
  
  drupal_not_found();
}

/**
 * Publish a feed for all revisions of a specific node
 *
 * @return bool True if successful in generating a feed, false otherwise.
 */
function revisions_rss_node_feed() {
  global $base_url;
  
  if (is_numeric(arg(2))) {
    $node = node_load(arg(2));
    
    if (revision_rss_check_type($node)) {
      $items = revisions_rss_get_revisions($node->nid);
      
      $namespaces = array();
      
      $channel = array(
        'title' => t('@site - Updates for "@title"', array(
          '@site' => check_plain(variable_get('site_name', 'Drupal')),
          '@title' => check_plain($node->title))),
        'description' => t('Updates for "@title"', array('@title' => $node->title)),
        'link' => url('node/'. $node->nid, NULL, NULL, TRUE));
      
      revisions_rss_format_feed($items, $channel, $namespaces);
      
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  
  return FALSE;
}

/**
 * Check if RSS should be available for the given node.
 *
 * @param $node The node object to check against.
 *
 * @return bool True if RSS should be available for this node type, false otherwise.
 */
function revision_rss_check_type($node) {
  return $node->nid && in_array($node->type, variable_get('revision_rss_nodetypes', array('page')));
}

/**
 *  Takes a node ID and generates the rss for that nodes revisions.
 *
 * @param $nid int The node ID of the note to generate RSS for.
 * @return The generated RSS.
 */
function revisions_rss_get_revisions($nid) {
  global $base_url;
  
  $items = '';
  
  $sql = "SELECT nr.nid
               , n.title
               , nr.uid
               , nr.vid
               , nr.log
               , nr.timestamp
          FROM {node_revisions} nr
          INNER JOIN {node} n
             ON nr.nid = n.nid
          WHERE nr.nid = '$nid'
          ORDER BY nr.timestamp DESC";
  
  $nodes = db_query_range(db_rewrite_sql($sql), 0, variable_get('feed_default_items', 10));
  
  while ($node = db_fetch_object($nodes)) {
    $user = user_load(array('uid' => $node->uid));
    $node->name = $user->name;
    
    if(!empty($node->log)) {
        $node->description = "Log: {$node->log}\n\n"; 
    }
    
    $node->description .= "Updated by: {$user->name}";
    
    $extra = array(
      array(
        'key' => 'pubDate',
        'value' => date('r', $node->timestamp)),
      array(
        'key' => 'dc:creator',
        'value' => $node->name),
      array(
        'key' => 'guid',
        'value' => 'Update '. $node->vid .' at '. $base_url .'/node/'. $node->nid,
        'attributes' => array('isPermaLink' => 'false')));
    $link = url("node/{$node->nid}", NULL, NULL, TRUE);
    $items .= format_rss_item($node->title, $link, check_markup($node->description, $node->format, FALSE), $extra);
  }
  
  return $items;
}

/**
 *  Format and print a revision feed.
 *
 * @param $items string The individual RSS items.
 * @param $channel array The channels present in the RSS.
 * @param $namespaces array The namespaces present in the RSS.
 */
function revisions_rss_format_feed($items, $channel = array(), $namespaces = array()) {
  global $base_url, $locale;
  
  $channel_defaults = array(
    'version' => '2.0',
    'title' => check_plain(variable_get('site_name', 'Drupal')) .' - '. t('Updates'),
    'link' => $base_url,
    'description' => t('Updates'),
    'language' => $locale);
  $channel = array_merge($channel_defaults, $channel);
  $namespaces = array_merge(array('xmlns:dc="http://purl.org/dc/elements/1.1/"'), $namespaces);
  
  $output = '<?xml version="1.0" encoding="utf-8"?>'."\n";
  $output .= '<rss version="'. $channel['version'] .'" xml:base="'. $base_url .'" '. implode(' ', $namespaces) .">\n";
  $output .= format_rss_channel($channel['title'], $channel['link'], $channel['description'], $items, $channel['language']);
  $output .= "</rss>\n";
  
  drupal_set_header('Content-Type: application/rss+xml; charset=utf-8');
  
  print$output;
}